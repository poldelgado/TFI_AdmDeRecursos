/*
 * File: app/view/procesos/pveprd/PvePrd.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('app.view.procesos.pveprd.PvePrd', {
    extend: 'Ext.container.Container',
    alias: 'widget.pveprd',

    requires: [
        'app.view.procesos.tec.TecPveViewModel1',
        'app.view.procesos.pveprd.grid',
        'Ext.form.Label',
        'Ext.form.field.ComboBox',
        'Ext.grid.Panel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button'
    ],

    viewModel: {
        type: 'procesos.pveprd.pveprd'
    },
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'label',
            text: 'AsocianciÃ³n Proveedores productos'
        },
        {
            xtype: 'container',
            layout: {
                type: 'hbox',
                align: 'middle'
            },
            items: [
                {
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            flex: 1,
                            fieldLabel: 'Proveedor',
                            labelAlign: 'right',
                            name: 'provider_id',
                            readOnly: false,
                            allowBlank: false,
                            displayField: 'name',
                            store: 'proveedores',
                            valueField: 'id',
                            listeners: {
                                select: 'onComboboxSelect'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'container',
            flex: 1,
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'pveprdgrid',
                    flex: 1,
                    itemId: 'gridIzq',
                    title: 'Disponibles'
                },
                {
                    xtype: 'toolbar',
                    border: 2,
                    width: 62,
                    items: [
                        {
                            xtype: 'container',
                            margin: '0 0 100 0',
                            width: 45,
                            layout: {
                                type: 'vbox',
                                align: 'center'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    margins: '0 0 25 0 ',
                                    width: '',
                                    icon: 'img/arrowR.png',
                                    text: '',
                                    listeners: {
                                        click: 'pasaDerecha'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    margins: '0 0 25 0',
                                    hidden: true,
                                    icon: 'img/arrowDR.png',
                                    text: '',
                                    listeners: {
                                        click: 'pasaTodoIzquierda'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    margins: '15 0 25 0',
                                    icon: 'img/arrowL.png',
                                    text: '',
                                    listeners: {
                                        click: 'pasaIzquierda'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    margins: '0 0 5 0',
                                    hidden: true,
                                    icon: 'img/arrowDL.png',
                                    text: '',
                                    listeners: {
                                        click: 'pasarTodoDerecha'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'pveprdgrid',
                    flex: 1,
                    itemId: 'gridDer',
                    title: 'Seleccionados'
                }
            ]
        }
    ],

    onComboboxSelect: function(combo, record, eOpts) {
        console.log('------');

        var prfId = combo.getValue(),
            conte 	= combo.up('pveprd'),
            gridIzq = conte.down('[itemId=gridIzq]'),
            gridDer = conte.down('[itemId=gridDer]');

        gridIzq.store.removeAll();
        gridDer.store.removeAll();


        var ajax = app.controller.std.Glob.ajax,
            json = ajax('GET', 'products_providers/find/'+combo.getValue(),null),
            jdis = ajax('GET', 'products',null);

        var disp = [];
        var disdata = jdis.data,
            estdata = json.data.products;
        for(var i=0;disdata.length>i; i++){
            var existe = false;
            for(var j=0;estdata.length>j; j++){
                if(disdata[i].id===estdata[j].id){
                    existe=true;
                    break;
                }
            }
            if(!existe){
                disp.push(disdata[i]);
            }
        }

        if(json.success){
            if(disp.length>0){
                gridIzq.store.add(disp);
            }
            if(estdata.length>0){
                gridDer.store.add(estdata);
            }
        }else{
            component.setValue(0);
            console.log("ERROR-seguridad.PerfilesObjetos");
        }
    },

    pasaDerecha: function(button, e, eOpts) {
        this.controlaPasajes('derecha');
    },

    pasaTodoIzquierda: function(button, e, eOpts) {
        this.controlaPasajes('todoDerecha');


    },

    pasaIzquierda: function(button, e, eOpts) {
          this.controlaPasajes('izquierda');
    },

    pasarTodoDerecha: function(button, e, eOpts) {
          this.controlaPasajes('todoIzquierda');
    },

    controlaPasajes: function(opcion) {
        var  conte 	= this,
            pveid	= conte.down('[name=provider_id]').getValue(),
            gridIzq = conte.down('[itemId=gridIzq]'),
            gridDer = conte.down('[itemId=gridDer]'),
            storeDer = gridDer.store,
            storeIzq = gridIzq.store;

        switch(opcion){
            case 'derecha':
                var  selection = gridIzq.getView().getSelectionModel().getSelection()[0];
                storeDer.add(selection.data);
                gridIzq.getView().getSelectionModel().selectNext();
                storeIzq.remove(selection);

                var par = {product_id:selection.data.id,provider_id:pveid};
                           var ajax = app.controller.std.Glob.ajax,
                           json = ajax('POST', 'products_providers',par);


                           break;
                           case 'todoDerecha':
                           var dataIzq = gridIzq.store.data;
                           dataIzq.each( function(record){
                           storeDer.add(record.data);
                          });
                storeIzq.removeAll();
                break;
            case 'izquierda':
                var  selection = gridDer.getView().getSelectionModel().getSelection()[0];
                storeIzq.add(selection.data);
                gridDer.getView().getSelectionModel().selectNext();
                storeDer.remove(selection);
                break;
            case 'todoIzquierda':
                var dataDer = gridDer.store.data;
                dataDer.each( function(record){
                    storeIzq.add(record.data);
                });
                storeDer.removeAll();
                break;
        }



    }

});